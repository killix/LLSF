% This is an examplar file on how the LLSF program could be used.
% Please ensure that libsvm package [1] (as attached) is put under the matlab path before envoking the LLSF function.
% 
% [1] C.-C. Chang and C.-J. Lin. LIBSVM: a library for support vector machines, Technical Report, 
%     2001. [http://www.csie.ntu.edu.tw/~cjlin/libsvm]
%
% Please feel free to contact me (huangjun_cs@163.com), if you have any problem about this programme.


addpath(genpath('../.'));
load('genbase.mat');

starttime = datestr(now,0);

optmParameter.gamma   = 0.01; %{0.01, 0.1}
optmParameter.alpha   = 2^-1; % 2.^[-10:10] % label correlation
optmParameter.beta    = 2^-1; % 2.^[-10:10] % sparsity

optmParameter.maxIter           = 50;
optmParameter.minimumLossMargin = 0.0001;
optmParameter.outputtempresult  = 0;
optmParameter.drawConvergence   = 0;

%% Model Parameters
modelparameter.crossvalidation    = 1;   % {0,1}
modelparameter.cv_num             = 5;
modelparameter.L2Norm             = 1;   % {0,1}

%% parameter for LLSF-LIFT
modelparameter.runBSVM            = 1; % {0,1}
modelparameter.runCC              = 1; % {0,1}
svm.type = 'Linear'; svm.para = [];

%% 
time = zeros(3,modelparameter.cv_num);

%% Train and Test
if modelparameter.crossvalidation==0 
    if modelparameter.L2Norm == 1
        train_data = train_data./repmat(sqrt(sum(train_data.^2,2)),1,size(train_data,2));
        test_data  = test_data./repmat(sqrt(sum(test_data.^2,2)),1,size(test_data,2));
    end

    [model_LLSF] = LLSF(train_data, train_target',optmParameter);
    Outputs      = test_data * model_LLSF;
    Outputs      = Outputs';
    Pre_Labels   = round(Outputs);  
    Pre_Labels   = (Pre_Labels==1); 
    Pre_Labels   = double(Pre_Labels);
    
    Result = zeros(15,6);
    Result(:,1) = EvaluationAll(Pre_Labels,Outputs,test_target);
    PrintResults(Result(:,1:2));
    
    Result(:,3) = LLSF_BR(train_data, train_target, test_data, test_target, model_LLSF, svm);
    PrintResults(Result(:,3:4));

    [Result(:,5), ~, ~ ] = LLSF_CC(cv_train_data, cv_train_target, cv_test_data, cv_test_target, svm, model_LLSF);
    PrintResults(Result(:,5:6));
else
%% cross validation
    if exist('train_data','var')==1
        data=[train_data;test_data];
        target=[train_target,test_target];
    end
    data     = double (data);
    num_data = size(data,1);
    if modelparameter.L2Norm == 1
        temp_data = data;
        temp_data = temp_data./repmat(sqrt(sum(temp_data.^2,2)),1,size(temp_data,2));
        if sum(sum(isnan(temp_data)))>0
            temp_data = data+eps;
            temp_data = temp_data./repmat(sqrt(sum(temp_data.^2,2)),1,size(temp_data,2));
        end
    else
        temp_data = data;
    end

    randorder = randperm(num_data);

    Result  = zeros(15,modelparameter.cv_num);
    Result2 = Result;
    Result3 = Result;

    for j = 1:modelparameter.cv_num
 
        fprintf('Cross Validation - %d/%d  ',j,modelparameter.cv_num);

       %% the training and test parts are generated by fixed spliting with the given order
        [cv_train_data,cv_train_target,cv_test_data,cv_test_target ] = generateCVSet( temp_data,target',randorder,j,modelparameter.cv_num );
        cv_train_target=cv_train_target';
        cv_test_target=cv_test_target';

        tic
       %% fixed parametrs
        [model_LLSF]  = LLSF( cv_train_data, cv_train_target',optmParameter);
        Outputs       = cv_test_data*model_LLSF;
        Outputs       = Outputs';

        % In our experiment, we set the threshold to be 0.5, and an appropriate threshold can be searched from the training data
        Pre_Labels  = round(Outputs);
        Pre_Labels  = (Pre_Labels == 1);
        Pre_Labels  = double(Pre_Labels);
        
        time(1,j) = toc;
        
       %% evaluation results of LLSF
        Result(:,j) = EvaluationAll(Pre_Labels,Outputs,cv_test_target)
        
        
       %% run and evaluate LLSF-BSVM
        if modelparameter.runBSVM == 1
           
            fprintf('\nResults of LLSF - BSVM - Linear\n');
            tic
            Result2(:,j) = LLSF_BR(cv_train_data, cv_train_target, cv_test_data, cv_test_target, model_LLSF, svm)
            time(2,j)    = toc;
        end
        
       %% run and evaluate LLSF-CC
        if modelparameter.runCC == 1
           
            fprintf('\nResults of LLSF - CC - Linear\n');
            tic
            [CC_Result, ~, ~ ] = LLSF_CC(cv_train_data, cv_train_target, cv_test_data, cv_test_target, svm, model_LLSF);
            Result3(:,j)       = CC_Result
            time(3,j)          = toc;
        end
        
    end

   %% the average results of LLSF
    Avg_Result = zeros(15,6);
    Avg_Result(:,1)=mean(Result,2);
    Avg_Result(:,2)=std(Result,1,2);
    fprintf('\nResults of LLSF\n');
    PrintResults(Avg_Result);
    
   %% the average results of LLSF-BSVM 
    if modelparameter.runBSVM == 1
        Avg_Result(:,3)=mean(Result2,2);
        Avg_Result(:,4)=std(Result2,1,2);
        fprintf('\nResults of LLSF-BSVM - Linear\n');
        PrintResults(Avg_Result(:,3:4));
    end
    
   %% the average results of LLSF-CC
    if modelparameter.runCC == 1
        Avg_Result(:,5)=mean(Result3,2);
        Avg_Result(:,6)=std(Result3,1,2);
        fprintf('\nResults of LLSF-CC - Linear\n');
        PrintResults(Avg_Result(:,5:6));
    end
    
end

endtime = datestr(now,0);
averagetime = mean(time,2);
fprintf('\nAverage Excue time \n');
fprintf('LLSF     : %f s\n',averagetime(1));

if modelparameter.runBSVM == 1
    fprintf('LLSF-BSVM: %f s\n',averagetime(2));
end
if modelparameter.runCC == 1
    fprintf('LLSF-CC  : %f s\n',averagetime(3));
end


